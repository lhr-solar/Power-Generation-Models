"""
@file       module.py
@author     Matthew Yu (matthewjkyu@gmail.com)
@brief      Model interface for a PV module.
@version    0.4.0
@date       2023-09-24
"""

from environment.environment import Environment
from pv.pv import PV


class Module(PV):
    def __init__(self, env: Environment, params: dict, data_fp=None) -> None:
        super().__init__(env, params, data_fp)

    def get_voltage(self, current: float, root_pos: (int, int, int)) -> float:
        """Get the voltage generated by the module as a function of the current
        applied across the module and external environment and internal cell
        characteristics.

        Args:
            current (float): Current across module. Amps.
            root_pos (int, int, int): X, Y, T point of the module.

        Returns:
            float: Voltage from module. Volts.
        """
        v = 0.0
        for cell in self._params["cells"].values():
            real_pos = [
                root_pos[0] + cell["pos"][0],
                root_pos[1] + cell["pos"][1],
                root_pos[2],
            ]
            v += cell["instance"].get_voltage(current, real_pos)

        # TODO: diode contribution

        return v

    def get_pos(self) -> list([int, int]):
        pos = []
        for cell in self._params["cells"].values():
            cell_pos = [
                [cell["pos"][0] + x, cell["pos"][1] + y]
                for x, y in cell["instance"].get_pos()
            ]
            pos.extend(cell_pos)

        return pos

    def fit_parameters(
        self, irradiance: float = None, temperature: float = None
    ) -> dict:
        raise NotImplementedError
