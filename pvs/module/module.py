"""
@file       module.py
@author     Matthew Yu (matthewjkyu@gmail.com)
@brief      Model interface for a PV module.
@version    0.4.0
@date       2023-09-23
"""
import sys

sys.path.extend([".", "..", "../.."])

import numpy as np

from environment.environment import Environment
from pvs.pv_interface import PVInterface
from pvs.cell.three_param_cell import ThreeParamCell


class Module(PVInterface):
    def __init__(self, env: Environment, params: dict, data_fp=None) -> None:
        super().__init__(env, params, data_fp)

    def get_voltage(self, current: float, root_pos: (int, int, int)) -> float:
        """Get the voltage generated by the module as a function of the current
        applied across the module and external environment and internal cell
        characteristics.

        Args:
            current (float): Current across module. Amps.
            root_pos (int, int, int): X, Y, T point of the module.

        Returns:
            float: Voltage from module. Volts.
        """
        v = 0.0
        for cell in self._params["cells"].values():
            real_pos = [
                root_pos[0] + cell["pos"][0],
                root_pos[1] + cell["pos"][1],
                root_pos[2],
            ]
            v += cell["instance"].get_voltage(current, real_pos)

        # TODO: diode contribution

        return v

    def get_pos(self) -> list((int, int)):
        pos = []
        for cell in self._params["cells"].values():
            pos.append(cell["pos"])

        return pos


if __name__ == "__main__":
    voxels = [[0, 0, 0, 1000, 273.15], [1, 0, 0, 500, 273.15], [2, 0, 0, 250, 273.15]]
    env = Environment()
    env.add_voxels(*np.transpose(voxels))

    # Parameters for a module consist of parameters for individual solar cells,
    # as well parameters for the bypass diode and lead resistance. Mix of
    # reference and fitting parameters.
    params = {
        "cells": {
            "1": {
                "instance": ThreeParamCell(
                    env=env,
                    params={
                        "ref_irrad": 1000.0,  # W/m^2
                        "ref_temp": 298.15,  # Kelvin
                        "ref_voc": 0.721,  # Volts
                        "ref_isc": 6.15,  # Amps
                        "fit_ideality_factor": 2.0,
                    },
                    # data_fp="" TODO: link to test file.
                ),
                "pos": (0, 0),
            },
            "2": {
                "instance": ThreeParamCell(
                    env=env,
                    params={
                        "ref_irrad": 1000.0,  # W/m^2
                        "ref_temp": 298.15,  # Kelvin
                        "ref_voc": 0.721,  # Volts
                        "ref_isc": 6.15,  # Amps
                        "fit_ideality_factor": 2.0,
                    },
                    # data_fp="" TODO: link to test file.
                ),
                "pos": (1, 0),
            },
            "3": {
                "instance": ThreeParamCell(
                    env=env,
                    params={
                        "ref_irrad": 1000.0,  # W/m^2
                        "ref_temp": 298.15,  # Kelvin
                        "ref_voc": 0.721,  # Volts
                        "ref_isc": 6.15,  # Amps
                        "fit_ideality_factor": 2.0,
                    },
                    # data_fp="" TODO: link to test file.
                ),
                "pos": (2, 0),
            },
        },
        "diode": {},
    }
    module = Module(env=env, params=params)  # data_fp="" TODO: link to test file.
    module.vis(([0, 0, 0],))
