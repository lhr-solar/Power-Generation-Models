"""
@file       cell.py
@author     Matthew Yu (matthewjkyu@gmail.com)
@brief      Model interface for a PV cell.
@version    0.4.0
@date       2023-09-23
"""
import sys

sys.path.extend(["."])

import pyqtgraph as pg
import numpy as np
import pandas as pd
from PySide6 import QtWidgets
from common.graph import Graph
import common.config as CONFIG


class Cell:
    k_b = 1.381e-23  # Boltzmann's constant (J/K).
    q = 1.602e-19  # Electron charge (C).
    SAMPLE_RES = 0.0005

    def __init__(self, parameters, data_fp=None) -> None:
        self._parameters = parameters
        self._data = None

        if data_fp is not None:
            # TODO: support to load in experimental data.
            pass
            # self.load_file()

    def get_current(self, volt: float, irrad: float, temp: float) -> float:
        """Get the current generated by the cell as a function of the voltage
        applied across the cell and the incident irradiance and cell surface
        temperature.

        Args:
            volt (float): Voltage across cell. Volts.
            irrad (float): Incident irradiance on cell. W/m^2.
            temp (float): Surface temperature. Kelvin.

        Returns:
            float: Current from cell. Amps.
        """
        raise NotImplementedError

    def get_iv(self, irrad: float, temp: float) -> [(float, float, float)]:
        """Get the I-V curve of the instance for some specific irradiance and
        temperature as an array of points spaced by SAMPLE_RES.

        TODO: support quadrant 2, quadrant 4 I-V output

        Args:
            irrad (float): Incident irradiance on cell. W/m^2.
            temp (float): Surface temperature. Kelvin.

        Returns:
            [(float, float, float)]: List of voltage-current-power pairs.
            Ordered.
        """
        iv = []

        volt = 0.0
        while True:
            volt += Cell.SAMPLE_RES
            curr = self.get_current(volt, irrad, temp)
            if curr > 0.0:
                iv.append((volt, curr, volt * curr))
            else:
                break
            
        return iv

    def get_edge(self, irrad: float, temp: float) -> ((float, float), (float, float)):
        """Get the 1st power quadrant edge characteristics of the instance for
        some specific irradiance and temperature.

        Args:
            irrad (float): Incident irradiance on cell. W/m^2.
            temp (float): Surface temperature. Kelvin.

        Returns:
            (float, float), (float, float):
                Open circuit voltage (Volts)
                Short circuit current (Amps)
                Maximum power point voltage (Volts)
                Maximum power point current (Amps)
        """
        iv = self.get_iv(irrad, temp)
        df = pd.DataFrame(iv, columns=["Voltage (V)", "Current (A)", "Power (W)"])

        v_oc = df.nlargest(1, "Voltage (V)").iloc[0]["Voltage (V)"]
        i_sc = df.nlargest(1, "Current (A)").iloc[0]["Current (A)"]

        mpp = df.nlargest(1, "Power (W)")
        v_mpp = mpp.iloc[0]["Voltage (V)"]
        i_mpp = mpp.iloc[0]["Current (A)"]

        return (v_oc, i_sc), (v_mpp, i_mpp)

    def get_parameters(self) -> dict:
        """Get associated reference and curve fitting parameters associated with
        the cell.

        Returns:
            dict: Parameters.
        """
        return self._parameters
    

    def _init_graph(self) -> Graph:
        """Initialize a graph instance.

        Args:
            self (Cell): Cell instance.

        Returns:
            Graph: Graph instance.
        """
        graph = Graph("Cell", "Voltage (V)", "Current (A) | Power (W)", use_gl=False)
        graph.add_series(
            {
                "iv": {
                    "x": [],
                    "y": [],
                    "color": (255, 0, 0, 255),
                },
                "pv": {
                    "x": [],
                    "y": [],
                    "color": (0, 255, 0, 255),
                },
            },
            "line",
        )
        return graph

    def _update_graph(self, graph: Graph, irrad: float, temp: float) -> None:
        """Update the I-V/P-V graph of the Cell instance with new operating
        parameters.

        Args:
            self (Cell): Cell instance.
            graph (Graph): Graph instance to update.
            irrad (float): Irradiance at new operating point.
            temp (float): Temperature at new operating point.
        """
        data = self.get_iv(irrad, temp)
        data = np.transpose(data)

        graph.series["iv"]["x"] = data[0]
        graph.series["iv"]["y"] = data[1]
        graph.series["pv"]["x"] = data[0]
        graph.series["pv"]["y"] = data[2]
        graph.update_graph()

    def vis(
        self, irrad: [float], temp: [float], cell_data_fp=None, return_widget=False
    ) -> None:
        """Visualize a cell over some set of conditions.
        TODO: support for adding and overlaying cell data.
        TODO: support for returning a graph widget and timer.

        Args:
            self (Cell): Cell instance.
            irrad ([float]): List of irradiances over time. Must be equal in
                length w/ temp.
            temp ([float]): List of temperatures over time. Must be equal in
                length w/ irrad.
            cell_data_fp (str, optional): Path to a file containing raw cell
                data. Defaults to None.

        Raises:
            Exception: Mismatched length env input.
            Exception: Zero length env input.
        """
        if len(irrad) != len(temp):
            raise Exception("Mismatched length environment inputs provided.")
        if not len(irrad):
            raise Exception("Zero length environment inputs provided.")

        if not QtWidgets.QApplication.instance():
            app = QtWidgets.QApplication(sys.argv)
        else:
            app = QtWidgets.QApplication.instance()

        win = QtWidgets.QMainWindow()
        win.setGeometry(0, 0, 720, 480)
        win.setWindowTitle(f"I-V/P-V Curve @ {irrad[0]} W/m^2, {temp[0]} K")

        container = QtWidgets.QWidget()
        container_layout = QtWidgets.QGridLayout()
        container.setLayout(container_layout)

        if len(irrad) == 1:
            graph = self._init_graph()
            self._update_graph(graph, irrad[0], temp[0])

            # Run the application
            win.setCentralWidget(graph.get_graph())
            win.show()
            exe = app.exec()

        else:
            # Visualize I-V curve with timer sweep at fixed FPS.
            graph = self._init_graph()

            def _update():
                _update.idx += 1
                if _update.idx > len(irrad) - 1:
                    _update.idx = 0
                self._update_graph(graph, irrad[_update.idx], temp[_update.idx])

            _update.idx = 0

            # Setup timer for updating graphs
            timer = pg.QtCore.QTimer()
            timer.timeout.connect(_update)

            # Run the application
            win.setCentralWidget(graph.get_graph())
            timer.start(1000 / CONFIG.FPS)
            win.show()
            exe = app.exec()
